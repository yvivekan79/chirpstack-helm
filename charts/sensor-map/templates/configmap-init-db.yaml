apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-sensor-map-init-db
  labels:
    app: {{ .Release.Name }}-sensor-map
    {{- include "chirpstack.labels" . | nindent 4 }}
data:
  init-db.sh: |
    #!/bin/bash
    set -e
    
    # Wait for TimescaleDB to be ready
    until PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME -c '\q'; do
      echo "TimescaleDB is unavailable - sleeping"
      sleep 5
    done
    
    echo "TimescaleDB is up - executing init scripts"
    
    # Create air quality sensors table if it doesn't exist
    PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME << EOF
    -- Create extension if it doesn't exist
    CREATE EXTENSION IF NOT EXISTS timescaledb;
    
    -- Create air quality sensors table
    CREATE TABLE IF NOT EXISTS air_quality_sensors (
      id SERIAL PRIMARY KEY,
      device_id TEXT NOT NULL,
      device_name TEXT NOT NULL,
      latitude DOUBLE PRECISION NOT NULL,
      longitude DOUBLE PRECISION NOT NULL,
      aqi INTEGER NOT NULL,
      pm25 DOUBLE PRECISION,
      pm10 DOUBLE PRECISION,
      created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    );
    
    -- Create temperature humidity sensors table
    CREATE TABLE IF NOT EXISTS temperature_humidity_sensors (
      id SERIAL PRIMARY KEY,
      device_id TEXT NOT NULL,
      device_name TEXT NOT NULL,
      latitude DOUBLE PRECISION NOT NULL,
      longitude DOUBLE PRECISION NOT NULL,
      temperature DOUBLE PRECISION NOT NULL,
      humidity DOUBLE PRECISION NOT NULL,
      created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    );
    
    -- Create hypertables if they don't exist already
    SELECT create_hypertable('air_quality_sensors', 'created_at', if_not_exists => TRUE);
    SELECT create_hypertable('temperature_humidity_sensors', 'created_at', if_not_exists => TRUE);
    
    -- Create indexes for faster queries
    CREATE INDEX IF NOT EXISTS idx_air_quality_device_time ON air_quality_sensors (device_id, created_at DESC);
    CREATE INDEX IF NOT EXISTS idx_temp_humidity_device_time ON temperature_humidity_sensors (device_id, created_at DESC);
    
    -- Set retention policy (keep data for 90 days)
    SELECT add_retention_policy('air_quality_sensors', INTERVAL '90 days', if_not_exists => TRUE);
    SELECT add_retention_policy('temperature_humidity_sensors', INTERVAL '90 days', if_not_exists => TRUE);
    
    -- Create compression policy (compress data older than 7 days)
    SELECT add_compression_policy('air_quality_sensors', INTERVAL '7 days', if_not_exists => TRUE);
    SELECT add_compression_policy('temperature_humidity_sensors', INTERVAL '7 days', if_not_exists => TRUE);
    EOF
    
    echo "Database initialization completed"