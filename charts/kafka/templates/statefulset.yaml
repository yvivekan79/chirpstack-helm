apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-kafka
  labels:
    app: {{ .Release.Name }}-kafka
    {{- include "chirpstack.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Release.Name }}-kafka
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-kafka
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-kafka
        {{- include "chirpstack.selectorLabels" . | nindent 8 }}
    spec:
      hostname: {{ .Release.Name }}-kafka
      initContainers:
        - name: set-node-id
          image: "{{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}"
          imagePullPolicy: {{ .Values.init.image.pullPolicy }}
          command: ["/bin/sh", "-c", "sh /mnt/scripts/generate-config.sh"]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          volumeMounts:
            - name: init-script
              mountPath: /mnt/scripts
            - name: kafka-config
              mountPath: /mnt/config
      containers:
        - name: kafka
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c", "source /mnt/config/kafka-env.sh && /opt/bitnami/scripts/kafka/entrypoint.sh /opt/bitnami/scripts/kafka/run.sh"]
          env:
            - name: BITNAMI_DEBUG
              value: "true"
            - name: KAFKA_ENABLE_KRAFT
              value: "yes"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: {{ .Values.config.processRoles | quote }}
            - name: KAFKA_CFG_LISTENERS
              value: {{ .Values.config.listeners | quote }}
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: {{ .Values.config.listenerSecurityProtocolMap | quote }}
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: {{ .Values.config.controllerListenerNames | quote }}
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            # KAFKA_CFG_ADVERTISED_LISTENERS is set in the /mnt/config/kafka-env.sh file by the init container
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: {{ .Values.config.offsetsTopicReplicationFactor | quote }}
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: {{ .Values.config.transactionStateLogReplicationFactor | quote }}
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: {{ .Values.config.transactionStateLogMinIsr | quote }}
            - name: KAFKA_KRAFT_CLUSTER_ID
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-kafka-config
                  key: KAFKA_KRAFT_CLUSTER_ID
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: "0@{{ .Release.Name }}-kafka-0.{{ .Release.Name }}-kafka.{{ .Release.Namespace }}.svc.cluster.local:9093,1@{{ .Release.Name }}-kafka-1.{{ .Release.Name }}-kafka.{{ .Release.Namespace }}.svc.cluster.local:9093,2@{{ .Release.Name }}-kafka-2.{{ .Release.Name }}-kafka.{{ .Release.Namespace }}.svc.cluster.local:9093"
          ports:
            - containerPort: 9092
              name: plaintext
            - containerPort: 9093
              name: controller
            - containerPort: 9094
              name: external
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: kafka-config
              mountPath: /mnt/config
      volumes:
        - name: init-script
          configMap:
            name: {{ .Release.Name }}-kafka-init-config
            defaultMode: 0755
        - name: kafka-config
          emptyDir: {}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
  {{- end }}