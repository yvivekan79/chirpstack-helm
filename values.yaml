# Global settings
global:
  # Set to false to disable a component
  postgresql:
    enabled: true
    host: postgresql
    port: 5432
    database: chirpstack
    username: chirpstack
    # Password will be taken from the PGPASSWORD environment variable
    existingSecret: chirpstack-db-credentials
    existingSecretKey: password
  
  redis:
    enabled: true
    host: redis
    port: 6379
    
  emqx:
    enabled: true
    
  kafka:
    enabled: true
    host: kafka
    port: 9092
    
  # Enable or disable LWNSimulator (LoRaWAN Network Simulator)
  lwnsimulator:
    enabled: false

  chirpstack:
    namespace: default
    labels:
      app: chirpstack
    initContainers:
      enabled: true  # Enable init containers for proper startup sequence
    gatewayBridge:
      enabled: true
      image:
        repository: chirpstack/chirpstack-gateway-bridge
        tag: 3.14.3
        pullPolicy: IfNotPresent
    networkServer:
      enabled: true
      image:
        repository: chirpstack/chirpstack-network-server
        tag: 3.17.3
        pullPolicy: IfNotPresent
    applicationServer:
      enabled: true
      image:
        repository: chirpstack/chirpstack-application-server
        tag: 3.17.3
        pullPolicy: IfNotPresent
      ingress:
        enabled: true
        host: chirpstack.local
        path: /
        annotations:
          kubernetes.io/ingress.class: nginx

# PostgreSQL settings - will be used by the PostgreSQL subchart
postgresql:
  enabled: true
  image:
    repository: postgres
    tag: 14.5-alpine
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  storage:
    size: 10Gi
    class: local-path
  service:
    type: ClusterIP
    port: 5432

# Redis settings - will be used by the Redis subchart
redis:
  enabled: true
  image:
    repository: redis
    tag: 7.0-alpine
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "500m"
  storage:
    size: 1Gi
    class: local-path
  service:
    type: ClusterIP
    port: 6379

# EMQX settings - will be used by the EMQX subchart
emqx:
  enabled: true
  image:
    repository: emqx/emqx
    tag: 4.4.14
    pullPolicy: IfNotPresent
  replicaCount: 1
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  storage:
    enabled: true
    size: 5Gi
    class: local-path
  service:
    type: NodePort
    mqttPort: 1883
    mqttsPort: 8883
    dashboardPort: 18083
    nodePorts:
      mqtt: 31883
      mqtts: 31884
      dashboard: 31885
    
# Kafka settings - will be used by the Kafka subchart
kafka:
  enabled: true
  replicas: 3
  image:
    repository: bitnami/kafka
    tag: 3.7-debian-12
    pullPolicy: IfNotPresent
  
  config:
    # KRaft mode configuration
    kraftMode: true
    kraftClusterId: "abcdefghijklmnopqrstuv"
    processRoles: "controller,broker"
    listeners: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
    listenerSecurityProtocolMap: "CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT"
    controllerListenerNames: "CONTROLLER"
    
    # Topic settings
    offsetsTopicReplicationFactor: 1
    transactionStateLogReplicationFactor: 1
    transactionStateLogMinIsr: 1
    
    # External access settings (for NodePort or LoadBalancer)
    external:
      enabled: false
      service:
        type: ClusterIP
        port: 9094
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "100m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  
  persistence:
    enabled: true
    size: 1Gi
    storageClass: "local-path"
  
  # Init container settings
  init:
    image:
      repository: busybox
      tag: 1.36
      pullPolicy: IfNotPresent
  
# ChirpStack Gateway Bridge settings
chirpstack-gateway-bridge:
  enabled: true
  replicaCount: 1
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"
  config:
    logging:
      level: "info"
    backend:
      type: "semtech_udp"
      semtech_udp:
        udp_bind: "0.0.0.0:1700"
    integration:
      mqtt:
        server: "tcp://{{ .Release.Name }}-emqx:1883"
        event_topic_template: "gateway/{{ .GatewayID }}/event/{{ .EventType }}"
        command_topic_template: "gateway/{{ .GatewayID }}/command/#"
  service:
    type: ClusterIP
    port: 1700
    protocol: UDP

# ChirpStack Network Server settings
chirpstack-network-server:
  enabled: true
  replicaCount: 1
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  config:
    postgresql:
      dsn: "postgres://chirpstack:${PGPASSWORD}@{{ .Release.Name }}-postgresql:5432/chirpstack_ns?sslmode=disable"
    redis:
      url: "redis://{{ .Release.Name }}-redis:6379"
    network_server:
      net_id: "000000"
      band:
        name: "EU868"
      gateway:
        mqtt:
          event_topic: "gateway/+/event/+"
          command_topic_template: "gateway/{{ .GatewayID }}/command/{{ .CommandType }}"
          server: "tcp://{{ .Release.Name }}-emqx:1883"
  service:
    type: ClusterIP
    port: 8000

# ChirpStack Application Server settings
chirpstack-application-server:
  enabled: true
  replicaCount: 1
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  config:
    postgresql:
      dsn: "postgres://chirpstack:${PGPASSWORD}@{{ .Release.Name }}-postgresql:5432/chirpstack_as?sslmode=disable"
    redis:
      url: "redis://{{ .Release.Name }}-redis:6379"
    application_server:
      integration:
        mqtt:
          server: "tcp://{{ .Release.Name }}-emqx:1883"
      api:
        public_host: "chirpstack.local"
      external_api:
        jwt_secret: "change-me-to-something-secure" # Should be changed in production
    join_server:
      enabled: true
    network_server:
      server: "{{ .Release.Name }}-chirpstack-network-server:8000"
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: true
    host: chirpstack.local
    path: /
    annotations:
      kubernetes.io/ingress.class: nginx
      
# LWNSimulator settings - for testing the ChirpStack deployment
lwnsimulator:
  enabled: false  # Disabled by default, enable for testing
  image:
    repository: registry.gitlab.com/lwnsimulator/lorawan-simulator
    tag: latest
    pullPolicy: IfNotPresent
  
  # Number of simulated LoRaWAN nodes
  simulatedNodes: 5
  
  # Gateway configuration
  gateway:
    eui: "b827ebfffe13cee4"  # Example Gateway EUI, should be changed
  
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"
  
  # Connection parameters for ChirpStack components
  chirpstack:
    # Gateway Bridge configuration
    gatewayBridge:
      host: chirpstack-chirpstack-gateway-bridge
      port: 1700
    
    # Application Server configuration (for API integration)
    applicationServer:
      host: chirpstack-chirpstack-application-server
      port: 8080
      apiKey: ""  # API key for Application Server if needed
  
  # Simulation parameters
  simulation:
    # Time between uplinks in seconds
    uplinkInterval: 60
    # Join type: OTAA or ABP
    joinType: "OTAA"
    # Device class: A, B, or C
    deviceClass: "A"
    # Data rate: 0-5 (DR0-DR5)
    dataRate: 0
    
# Telegraf Configuration
telegraf:
  enabled: true
  replicaCount: 1
  
  image:
    repository: telegraf
    tag: "1.28.0-alpine"
    pullPolicy: IfNotPresent
    
  # Configuration for Telegraf
  config:
    global:
      interval: "10s"
      round_interval: true
      metric_batch_size: 1000
      metric_buffer_limit: 10000
      collection_jitter: "0s"
      flush_jitter: "0s"
      precision: ""
      debug: false
      quiet: false
      logfile: ""
    
    # MQTT Input to receive data from EMQX
    mqttInput:
      enabled: true
      servers: ["tcp://{{ .Release.Name }}-emqx:1883"]
      topics: ["application/+/device/+/event/+"]
      username: ""
      password: ""
      data_format: "json"
      
    # Kafka Output to send processed data to Kafka
    kafkaOutput:
      enabled: true
      brokers: ["{{ .Release.Name }}-kafka-0.{{ .Release.Name }}-kafka.{{ .Release.Namespace }}.svc.cluster.local:9092"]
      topic: "iot.device.data"
      
    # Kafka Input to receive data from Kafka
    kafkaInput:
      enabled: true
      brokers: ["{{ .Release.Name }}-kafka-0.{{ .Release.Name }}-kafka.{{ .Release.Namespace }}.svc.cluster.local:9092"]
      topics: ["iot.device.data"]
      consumer_group: "telegraf_consumers"
      
    # TimescaleDB Output to store data in TimescaleDB
    timescaledbOutput:
      enabled: true
      connection: "postgres://postgres:postgres@{{ .Release.Name }}-timescaledb:5432/iot_timeseries"
      database: "iot_timeseries"
      username: "postgres"
      password: "postgres"
      table: "device_data"
      hypertable: true
      hypertable_partition_by: "time"
      hypertable_chunk_time_interval: "1h"
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  serviceAccount:
    create: true
    name: ""
    
# TimescaleDB Configuration
timescaledb:
  enabled: true
  replicaCount: 1
  
  image:
    repository: timescale/timescaledb-ha
    tag: "pg14-ts2.10-latest"
    pullPolicy: IfNotPresent
    
  # TimescaleDB configuration
  config:
    # Database configuration
    database:
      name: "iot_timeseries"
      user: "postgres"
      password: "postgres"
      
    # TimescaleDB specific configuration
    timescaledb:
      # Enable TimescaleDB extension
      enabled: true
      # Enable compression
      compression_enabled: true
      # Automatic compression after 7 days
      compression_age: "7d"
      
    # PostgreSQL configuration
    postgresql:
      max_connections: 100
      shared_buffers: "256MB"
      
  # Persistence configuration
  persistence:
    enabled: true
    # Use local-path storage class
    storageClass: "local-path"
    accessMode: ReadWriteOnce
    size: 10Gi
    
  # Service configuration
  service:
    type: NodePort
    port: 5432
    nodePort: 32432
    
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi
  
  serviceAccount:
    create: true
    name: ""

# Connectivity Fairy with cute mascot to visualize and monitor IoT infrastructure connectivity
connectivity-fairy:
  enabled: true
  
  # User interface configuration
  config:
    # Mascot type: "fairy", "wizard", "robot", "unicorn"
    mascotType: "fairy"
    
    # Scanning interval in seconds
    scanInterval: 30
    
    # Whether to show cute animations
    enableAnimations: true
    
    # Theme color scheme: "pastel", "vibrant", "dark", "light" 
    colorScheme: "pastel"
    
    # Components to monitor
    componentsToMonitor:
      - emqx
      - kafka
      - postgresql
      - redis
      - timescaledb
      - chirpstack-gateway-bridge
      - chirpstack-network-server
      - chirpstack-application-server
      - telegraf
      - sensor-map
      - geo-enrichment-service
  
  # Web service configuration
  service:
    type: ClusterIP
    port: 80
  
  # Ingress configuration for connectivity monitoring UI
  ingress:
    enabled: true
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: connectivity-fairy.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
  
  # Resource limits
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Role-based access control for checking connectivity
  rbac:
    create: true
    
# Real-time Geospatial Sensor Map for visualizing IoT sensors on a map
sensor-map:
  enabled: false
  replicaCount: 1

  image:
    repository: nginx
    tag: "alpine"
    pullPolicy: IfNotPresent

  # Map configuration
  config:
    # API endpoint paths
    api:
      airQualitySensors: "/api/sensors/air-quality"
      temperatureHumiditySensors: "/api/sensors/temperature-humidity"
      allSensors: "/api/sensors/all"
      # Geo-enrichment service endpoints
      locations: "/api/locations"
      nearbyLocations: "/api/locations/nearby"
      
    # Map UI settings  
    ui:
      defaultCenter:
        lat: -3.4653
        lng: -62.2159
      defaultZoom: 6
      updateInterval: 5000
      mapProvider: "openstreetmap" # openstreetmap, google, mapbox
      
    # Map features
    features:
      clustering: true
      heatmap: true
      timeline: true
      filterByType: true
      filterByValue: true
      realTimeUpdates: true
      showLocations: true
      showNearbyPoints: true
      locationAwareness: true
      
    # Database connection
    database:
      type: "timescaledb"
      host: "{{ .Release.Name }}-timescaledb"
      port: 5432
      database: "iot_timeseries"
      user: "postgres"
      existingSecret: ""
      existingSecretKey: "postgres-password"
      
    # Kafka connection (for real-time updates)
    kafka:
      enabled: true
      brokers: ["{{ .Release.Name }}-kafka-0.{{ .Release.Name }}-kafka.{{ .Release.Namespace }}.svc.cluster.local:9092"]
      topics:
        - "realtime-gr-dss-airqualitysensor"
        - "realtime-gr-dss-temperaturehumiditysensor"
      consumerGroup: "sensor-map-consumer"

  # Service configuration
  service:
    type: ClusterIP
    port: 80

  # Ingress configuration
  ingress:
    enabled: true
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: sensor-map.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  serviceAccount:
    create: true
    name: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}

# Geo-Enrichment Service for providing location reference data to IoT devices
geo-enrichment-service:
  enabled: false
  replicaCount: 1

  image:
    repository: node
    tag: 16-alpine
    pullPolicy: IfNotPresent

  # Configuration for database connection
  database:
    enabled: true
    host: "{{ .Release.Name }}-timescaledb"
    port: 5432
    name: "iot_timeseries"
    user: "postgres"
    password: "postgres"

  # Location Data Configuration
  locationData:
    # Update interval for refreshing location data (in minutes)
    refreshInterval: 30
    # Whether to import default locations on startup
    importDefaultLocations: true
    
  service:
    type: ClusterIP
    port: 8080

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Amazon Rainforest Simulator configuration
rainforest-simulator:
  enabled: false
  replicaCount: 1

  image:
    repository: python
    tag: 3.9-alpine
    pullPolicy: IfNotPresent

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  config:
    # MQTT connection settings
    mqtt:
      host: emqx
      port: 1883
      username: ""
      password: ""
      clientId: "rainforest-simulator"
      topic: "amazon-rainforest/simulate"
    
    # Simulation settings
    simulation:
      # Number of virtual sensors to simulate
      sensorCount: 15
      # Interval in seconds between data publications
      intervalSeconds: 60
      # Min/max coordinates for the Amazon rainforest region (roughly central Brazil Amazon area)
      region:
        minLat: -5.0
        maxLat: -2.0
        minLon: -67.0
        maxLon: -59.0
